
entity Merchant {
    name String required maxlength(250),
    reference String required maxlength(25) unique,
    created Instant required
}

enum PaymentMethodType {
    CARD,
    MOBILE,
    CODE
}

entity PaymentMethod {
	name String required maxlength(250),
    type PaymentMethodType required,
    tokenizable Boolean required,
    url String required maxlength(1000),
    active Boolean required
}

entity PaymentMethodCredential {
    credentials String required maxlength(1000),
    validUntil Instant,
}

enum UnavailableType {
	MAINTENANCE,
    UNDERATTACK,
    OVERLOAD
}

entity PaymentMethodUnavailable {
	type UnavailableType required,
    from Instant required,
    until Instant,
}

/**
 * Fun unified payment token
 */
entity UnifiedPaymentToken {
    token String required maxlength(500) unique,
  	type PaymentMethodType required,
    payload String required maxlength(1000),
    validUntil Instant,
}

entity Currency {
	isoCode String required maxlength(3) unique,
    isoNumericCode Integer required unique,
    defaultFractionDigits Integer required
}

enum TransactionType {
	SALE,
    REFUND,
    PAYOUT
}

enum UnifiedTransactionResult {
    AUTHORIZED,
    CANCELLED,
    ERROR,
    PENDING,
    REFUSED,
    SUCCESS,
    VALIDATION_ERROR
}

entity Transaction {
	amount Long required,
    funReference String required maxlength(25) unique,
    transactionType TransactionType required,
    transactionDate Instant required,
    result UnifiedTransactionResult,
    processorResult String,
    externalReference String maxlength(25),
}

dto all with mapstruct
service all with serviceImpl

relationship ManyToMany {
    Merchant{user} to User
}

relationship ManyToMany {
    Merchant{paymentMethod} to PaymentMethod{merchant}
}

relationship OneToMany {
    Merchant{paymentMethodCredential} to PaymentMethodCredential{merchant}
}

relationship OneToMany {
    Merchant{unifiedPaymentToken} to UnifiedPaymentToken{merchant required}
}

relationship ManyToOne {
    Transaction{merchant required} to Merchant
}

relationship ManyToOne {
    Transaction{currency required} to Currency
}

relationship ManyToOne {
    Transaction{paymentMethod required} to PaymentMethod
}

relationship ManyToOne {
    Transaction{unifiedPaymentToken required} to UnifiedPaymentToken
}

relationship OneToMany {
    PaymentMethod{paymentMethodUnavailable} to PaymentMethodUnavailable{paymentMethod required}
}

relationship OneToMany {
    PaymentMethod{paymentMethodCredential} to PaymentMethodCredential{paymentMethod required}
}
